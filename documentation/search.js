window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "relocation_impact_analyzer", "modulename": "relocation_impact_analyzer", "kind": "module", "doc": "<p>Relocation Impact Analyzer Package</p>\n\n<p>Author: Victor Foulk\nLicense: MIT License\nDate: 2024-03-15\nVersion: 0.0.1 Pre-Alpha</p>\n\n<p>This package forms the core of the Relocation Impact Analyzer project, designed to support a customer in evaluating the implications \nof potential office relocation on employee commutes, environmental impact, and related financial considerations. \nIt offers a comprehensive toolkit for analyzing various relocation scenarios, integrating geospatial intelligence, traffic analytics, \nand cost-benefit analyses to aid in strategic decision-making.</p>\n\n<p>The Relocation Impact Analyzer facilitates a detailed examination of how changing the company's headquarters location could affect \noperational efficiency, employee satisfaction, and the organization's environmental footprint. By assessing these impacts across different \nrelocation options, this package helps translate complex analytics into actionable insights and financial terms, contributing significantly \nto the overall business case evaluation.</p>\n\n<p>Package Contents:</p>\n\n<ul>\n<li>analyzer: Contains core functionalities for conducting the impact analysis.</li>\n<li>project: Manages project-specific data and configurations.</li>\n<li>g_api: Interfaces with geospatial and traffic analytics APIs.</li>\n<li>ui: Provides a web-based user interface for interactive analysis and visualization.</li>\n<li>graphing: Supports the generation of graphical representations of analysis outcomes.</li>\n</ul>\n\n<p>Additionally, this package initializes the package environment, setting up necessary configurations and routines essential for its operation.</p>\n\n<p>Note: This package adheres to ENMA 605 guidelines and legal requirements for the protection of sensitive information. \nIt is part of a broader project aiming to enhance a customer'sstrategic planning process and provide a reusable framework for future analyses.</p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer", "modulename": "relocation_impact_analyzer.analyzer", "kind": "module", "doc": "<p>Analyser Class</p>\n\n<p>Author: Victor Foulk\nLicense: MIT License\nDate: 2024-03-15\nVersion: 0.0.1 Pre-Alpha</p>\n\n<p>The Analyzer class is the central component of the Relocation Impact Analyzer tool. It orchestrates various analyses related to the impacts of office relocations, including geocoding addresses, analyzing commute patterns, and generating graphical representations of the data. This class leverages external APIs, custom data handling, and graphical libraries to perform a comprehensive analysis tailored to the needs of strategic decision-making regarding office locations.</p>\n\n<p>Key functionalities include:</p>\n\n<ul>\n<li>Geocoding addresses to latitude and longitude.</li>\n<li>Generating employee commute data and associated costs and emissions.</li>\n<li>Fuzzing GPS data to anonymize employee locations.</li>\n<li>Calculating commute costs and emissions based on commute data.</li>\n<li>Generating visual representations of analyzed data for easier interpretation.</li>\n</ul>\n\n<p>This class is designed with modularity and reusability in mind, allowing for flexible adaptation and expansion to meet the evolving requirements of relocation impact analysis.</p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.__init__", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.__init__", "kind": "function", "doc": "<p>Initializes the Analyzer with specified project details and configuration.</p>\n\n<p>Args:\n    proj (str, optional): The name of the project to load or create. Defaults to None.\n    project_directory (str, optional): The directory where project files are stored. Defaults to None.\n    env_file (str, optional): Path to a .env file for loading configuration variables. Defaults to an empty string.</p>\n\n<p>Raises:\n    ValueError: If the specified project directory does not exist or no .env file is provided when expected.</p>\n\n<p>This constructor sets up the API rate limiting, loads the .env configuration, initializes the Google API client,\nand prepares the project directory and graphs subdirectory as needed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">proj</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">project_directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">env_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.api_rate_limit", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.api_rate_limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.sleep_time", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.sleep_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.last_call", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.last_call", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.gAPI", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.gAPI", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.gAPI_key", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.gAPI_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.analysis_phase", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.analysis_phase", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.env_file", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.env_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.project_directory", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.project_directory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.project", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.project", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.graphing", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.graphing", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.load_graphs", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.load_graphs", "kind": "function", "doc": "<p>Loads the list of graph filenames from the project's 'plots' directory.</p>\n\n<p>This method checks if the 'plots' subdirectory exists within the current project directory. \nIf it doesn't exist, it creates the directory. It then updates the instance variable with a list of .png filenames \nfound in the 'plots' directory.</p>\n\n<p>Returns:\n    bool: True if the project has a 'plots' directory, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.sleepif", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.sleepif", "kind": "function", "doc": "<p>Ensures adherence to the API rate limit by sleeping if the time since the last API call is less than the required wait time.</p>\n\n<p>This method calculates the time elapsed since the last API call and pauses execution for the remainder of the time needed to \ncomply with the set rate limit, ensuring that API requests do not exceed the prescribed rate.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.log_error", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.log_error", "kind": "function", "doc": "<p>Logs an error message to the 'error_log.txt' file.</p>\n\n<p>Appends the provided message to a log file dedicated to errors, facilitating debugging and error tracking over time.</p>\n\n<p>Args:\n    message (str): The error message to log.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.save_env", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.save_env", "kind": "function", "doc": "<p>Saves the specified environment variables to the .env file and updates the runtime environment.</p>\n\n<p>This method allows dynamic updating of critical environment variables, including the Google Maps API key and the default project directory. \nIf any arguments are provided, they override the corresponding instance variables before saving.</p>\n\n<p>Args:\n    project_directory (str, optional): The directory where project files are stored. If specified, overrides the existing value.\n    gAPI_key (str, optional): The Google Maps API key. If specified, overrides the existing value.\n    env_file (str, optional): Path to the .env file. If specified, overrides the existing value.</p>\n\n<p>Raises:\n    ValueError: If no .env file path is provided.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">project_directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">gAPI_key</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">env_file</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.list_projects", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.list_projects", "kind": "function", "doc": "<p>Lists all projects within the project directory.</p>\n\n<p>Retrieves the names of all subdirectories within the project directory, treating each as a separate project. \nThis method is useful for enumerating all available projects for selection or analysis.</p>\n\n<p>Returns:\n    list: A list of project names (subdirectory names) within the project directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.create_project", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.create_project", "kind": "function", "doc": "<p>Creates a new project with the specified name.</p>\n\n<p>This method initializes a new <code>Project</code> instance and sets it as the current project. It updates the analysis phase \nbased on the new project's status.</p>\n\n<p>Args:\n    project_name (str): The name of the new project to create.</p>\n\n<p>Returns:\n    bool: True if the project is successfully created, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">project_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.load_project", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.load_project", "kind": "function", "doc": "<p>Loads an existing project by name.</p>\n\n<p>Sets the specified project as the current project, loads any associated graphs, and updates the analysis phase \nbased on the loaded project's status.</p>\n\n<p>Args:\n    project_name (str): The name of the project to load.</p>\n\n<p>Returns:\n    bool: True if the project is successfully loaded, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">project_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.update_analysis_phase", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.update_analysis_phase", "kind": "function", "doc": "<p>Updates the analysis phase based on the current state of the project data.</p>\n\n<p>This method determines the current phase of analysis by checking the availability of specific data files within the project. \nThe analysis phase is a critical component that guides the workflow and available actions within the current project context.</p>\n\n<p>Returns:\n    int: The updated analysis phase.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.convert_addresses_to_gps", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.convert_addresses_to_gps", "kind": "function", "doc": "<p>Converts addresses from specified CSV files to GPS coordinates using the Google Maps API.</p>\n\n<p>This method processes both employee and office address data, converting each address to latitude and longitude coordinates. \nThe results are saved to corresponding GPS data files. If logging is enabled, the process details are recorded in a specified log CSV file.</p>\n\n<p>Args:\n    force (bool, optional): If True, forces re-conversion of addresses even if GPS data already exists. Defaults to False.\n    log_csv (str, optional): Path to a log CSV file where operation details are recorded. Defaults to None.</p>\n\n<p>Returns:\n    bool: True if the conversion process is completed successfully for all addresses; False otherwise.</p>\n\n<p>This method handles geocoding of addresses using the Google Maps API, respecting API rate limits\nand optionally logging the process. If <code>force</code> is True, existing GPS data is ignored, and addresses are re-geocoded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">log_csv</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.fuzz_employee_gps", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.fuzz_employee_gps", "kind": "function", "doc": "<p>Applies a fuzzing process to employee GPS coordinates to anonymize locations.</p>\n\n<p>This method adds a small, random displacement to the latitude and longitude of employee addresses. \nThis process is intended to protect privacy by preventing the exact identification of employee home locations.</p>\n\n<p>Args:\n    force (bool, optional): If True, forces re-fuzzing of GPS coordinates even if fuzzed data already exists. Defaults to False.</p>\n\n<p>Returns:\n    bool: True if fuzzing is successfully applied to all employee GPS coordinates; False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.get_commute_data", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.get_commute_data", "kind": "function", "doc": "<p>Generates commute data for employees based on their GPS coordinates and the office locations.</p>\n\n<p>This method calculates commute times and distances from employees' locations to the office, accounting for specified commute times. \nOptionally logs the operation details if a log CSV file path is provided.</p>\n\n<p>Args:\n    force (bool, optional): If True, forces regeneration of commute data even if it already exists. Defaults to False.\n    log_csv (str, optional): Path to a log CSV file where operation details are recorded. Defaults to None.</p>\n\n<p>Returns:\n    bool: True if commute data is successfully generated; False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">log_csv</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.convert_stringtime_to_minutes", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.convert_stringtime_to_minutes", "kind": "function", "doc": "<p>Converts a string representing distance into miles.</p>\n\n<p>Parses a string for distance measurements expressed in various units (miles, kilometers, meters, etc.) and converts \nthe total distance into miles.</p>\n\n<p>Args:\n    distance_string (str): The distance string to convert.</p>\n\n<p>Returns:\n    float: The total distance in miles.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.convert_stringdistance_to_d", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.convert_stringdistance_to_d", "kind": "function", "doc": "<p>Converts a string representing distance into miles.</p>\n\n<p>Parses a string for distance measurements expressed in various units (miles, kilometers, meters, etc.) and converts \nthe total distance into miles.</p>\n\n<p>Args:\n    distance_string (str): The distance string to convert.</p>\n\n<p>Returns:\n    float: The total distance in miles.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">distance_string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.get_commute_cost", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.get_commute_cost", "kind": "function", "doc": "<p>Updates the commute data with calculated commute costs based on distances.</p>\n\n<p>Commute costs are calculated using the project's specified mileage rate applied to the commute distances for each employee.</p>\n\n<p>Args:\n    force (bool, optional): If True, forces recalculation of commute costs even if they are already calculated. Defaults to False.</p>\n\n<p>Returns:\n    bool: True if commute costs are successfully calculated; False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.get_commute_emissions", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.get_commute_emissions", "kind": "function", "doc": "<p>Calculates and updates commute data with emissions estimates based on commute distances.</p>\n\n<p>Commute emissions are calculated using the project's specified CO2 emissions per mile, applied to the commute distances \nfor each employee. Optionally adjusts emissions based on traffic conditions.</p>\n\n<p>Args:\n    force (bool, optional): If True, forces recalculation of commute emissions even if they are already calculated. Defaults to False.</p>\n\n<p>Returns:\n    bool: True if commute emissions are successfully calculated; False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.get_traffic_regime", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.get_traffic_regime", "kind": "function", "doc": "<p>Determines the traffic regime based on the commute distance and duration in traffic.</p>\n\n<p>The traffic regime is an estimation of traffic conditions affecting the commute, categorized into levels based on the \nrelationship between the expected duration and the actual duration in traffic.</p>\n\n<p>Args:\n    distance (float): The distance of the commute.\n    duration_in_traffic (int): The duration of the commute in traffic in minutes.</p>\n\n<p>Returns:\n    int: The traffic regime level, indicating the severity of traffic conditions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">distance</span>, </span><span class=\"param\"><span class=\"n\">duration_in_traffic</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.get_traffic_emissions_factor", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.get_traffic_emissions_factor", "kind": "function", "doc": "<p>Retrieves the emissions factor associated with a given traffic regime.</p>\n\n<p>This method returns a multiplier that adjusts the calculated emissions based on the traffic regime, \nwith different factors indicating varying levels of traffic congestion.</p>\n\n<p>Args:\n    regime (int): The traffic regime level as determined by get_traffic_regime method.</p>\n\n<p>Returns:\n    float: The emissions factor corresponding to the specified traffic regime.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">regime</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.handle_GAPI_exception", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.handle_GAPI_exception", "kind": "function", "doc": "<p>Determines the course of action for a given Google API exception.</p>\n\n<p>Based on the type of exception encountered during API calls, this method decides whether the exception is recoverable \n(suggesting a retry might succeed) or if it's unrecoverable, necessitating alternate handling.</p>\n\n<p>Args:\n    exception (Exception): The exception encountered during a Google API call.</p>\n\n<p>Returns:\n    bool: True if the exception is considered recoverable, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exception</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.generate_graphs", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.generate_graphs", "kind": "function", "doc": "<p>Generates and saves graphical representations of analyzed commute data.</p>\n\n<p>Based on the available commute data, this method generates graphs such as the geographical distribution \nof analyzed locations and the local analysis of commute geography. It supports generating all graphs or \na specific one based on the <code>graph</code> parameter.</p>\n\n<p>Args:\n    graph (str, optional): Specifies which graph to generate. Use \"_all\" to generate all graphs, or specify a \n    particular graph's key. Defaults to \"_all\".</p>\n\n<p>Returns:\n    list: A list of dictionaries, each containing details about the generated graphs, including file paths and titles.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"s1\">&#39;_all&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.generate_tables", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.generate_tables", "kind": "function", "doc": "<p>Generates and saves tabular representations of analyzed commute data.</p>\n\n<p>Based on the available commute data, this method generates tables such as the overall cost comparison analytics.</p>\n\n<p>Args:\n    graph (str, optional): Specifies which table to generate. Use \"_all\" to generate all tables, or specify a \n    particular table's key. Defaults to \"_all\".</p>\n\n<p>Returns:\n    list: A list of dictionaries, each containing details about the generated tables, including file paths and titles.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;_all&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.get_attrition_analysis", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.get_attrition_analysis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">emp</span>, </span><span class=\"param\"><span class=\"n\">offices</span>, </span><span class=\"param\"><span class=\"n\">commute_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.analyzer.Analyzer.get_emissions_analysis", "modulename": "relocation_impact_analyzer.analyzer", "qualname": "Analyzer.get_emissions_analysis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">emp</span>, </span><span class=\"param\"><span class=\"n\">offices</span>, </span><span class=\"param\"><span class=\"n\">commute_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.g_api", "modulename": "relocation_impact_analyzer.g_api", "kind": "module", "doc": "<p>GAPI - Google Maps API Utility Class</p>\n\n<p>The GAPI class encapsulates interactions with the Google Maps API, offering simplified methods for geocoding addresses, \ncalculating commute information, adding anonymity to location data, and generating static map images. This utility class \nis intended to streamline the process of integrating Google Maps services into the analysis workflow, focusing on geospatial \ndata manipulation and visualization tasks.</p>\n\n<p>This class handles API key management, rate limit considerations, and provides custom exception handling for API-related errors, \nenhancing the robustness of geospatial analyses conducted by the Analyzer.</p>\n\n<p>Author: Victor Foulk\nLicense: MIT License\nDate: 2024-03-15\nVersion: 0.0.1 Pre-Alpha</p>\n"}, {"fullname": "relocation_impact_analyzer.g_api.EmptyResult", "modulename": "relocation_impact_analyzer.g_api", "qualname": "EmptyResult", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "relocation_impact_analyzer.g_api.GAPI", "modulename": "relocation_impact_analyzer.g_api", "qualname": "GAPI", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.g_api.GAPI.__init__", "modulename": "relocation_impact_analyzer.g_api", "qualname": "GAPI.__init__", "kind": "function", "doc": "<p>Initializes the GAPI object with a provided Google Maps API key or loads it from the environment.</p>\n\n<p>Args:\n    api_key (str, optional): The Google Maps API key. If not provided, the key is loaded from the \n    .env file using the GMAPS_API_KEY variable.</p>\n\n<p>This constructor sets up the Google Maps client for subsequent API calls and defines a mapping of Google API \nexceptions to their recoverability status.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "relocation_impact_analyzer.g_api.GAPI.gmaps", "modulename": "relocation_impact_analyzer.g_api", "qualname": "GAPI.gmaps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.g_api.GAPI.google_api_exceptions", "modulename": "relocation_impact_analyzer.g_api", "qualname": "GAPI.google_api_exceptions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.g_api.GAPI.validate_address", "modulename": "relocation_impact_analyzer.g_api", "qualname": "GAPI.validate_address", "kind": "function", "doc": "<p>Validates an address using the Google Maps API, ensuring it is a legitimate and recognized address.</p>\n\n<p>Args:\n    address (str): The address to validate.</p>\n\n<p>Returns:\n    dict: The validation result, which may include detailed address information or an error message if the validation fails.</p>\n\n<p>This method attempts to validate the given address and catches any exceptions, adding a note to the \nexception with the address that triggered it before returning an error dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">address</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.g_api.GAPI.commute", "modulename": "relocation_impact_analyzer.g_api", "qualname": "GAPI.commute", "kind": "function", "doc": "<p>Calculates commute details between an origin and a destination at a specified departure time.</p>\n\n<p>Args:\n    origin (tuple): The latitude and longitude of the origin point.\n    destination (tuple): The latitude and longitude of the destination point.\n    departure_time (datetime): The time of departure used to estimate traffic conditions.</p>\n\n<p>Returns:\n    dict: A dictionary containing commute distance, duration, and duration in traffic. If an error occurs, \n    returns a dictionary with an error message.</p>\n\n<p>Exceptions are caught and annotated with the relevant details before being returned as part of the error dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">origin</span>, </span><span class=\"param\"><span class=\"n\">destination</span>, </span><span class=\"param\"><span class=\"n\">departure_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.g_api.GAPI.geocode", "modulename": "relocation_impact_analyzer.g_api", "qualname": "GAPI.geocode", "kind": "function", "doc": "<p>Retrieves the latitude and longitude coordinates for a given address.</p>\n\n<p>Args:\n    address (str): The address to geocode.</p>\n\n<p>Returns:\n    dict: A dictionary containing the 'lat' and 'lng' keys with corresponding latitude and longitude values.</p>\n\n<p>Raises:\n    EmptyResult: If the geocode operation returns an empty result, indicating the address could not be found or recognized.</p>\n\n<p>Additional exceptions are caught, annotated, and re-raised to provide more context about the failure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">address</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.g_api.GAPI.fuzz_latlong", "modulename": "relocation_impact_analyzer.g_api", "qualname": "GAPI.fuzz_latlong", "kind": "function", "doc": "<p>Applies a random displacement within a specified radius to a set of GPS coordinates to anonymize them.</p>\n\n<p>Args:\n    latlong (dict): A dictionary containing the 'lat' and 'lng' keys for the original coordinates.\n    fuzz (float): The radius in miles within which the random displacement should be applied.</p>\n\n<p>Returns:\n    dict: A dictionary containing the 'lat' and 'lng' keys with the fuzzed coordinates.</p>\n\n<p>This method is particularly useful for anonymizing location data before publication, ensuring individual privacy is maintained.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">latlong</span>, </span><span class=\"param\"><span class=\"n\">fuzz</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.g_api.GAPI.haversine", "modulename": "relocation_impact_analyzer.g_api", "qualname": "GAPI.haversine", "kind": "function", "doc": "<p>Calculates the great-circle distance between two points on the Earth's surface.</p>\n\n<p>Args:\n    lat1 (float): The latitude of the first point.\n    lon1 (float): The longitude of the first point.\n    lat2 (float): The latitude of the second point.\n    lon2 (float): The longitude of the second point.</p>\n\n<p>Returns:\n    float: The distance between the two points in miles.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lat1</span>, </span><span class=\"param\"><span class=\"n\">lon1</span>, </span><span class=\"param\"><span class=\"n\">lat2</span>, </span><span class=\"param\"><span class=\"n\">lon2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.g_api.GAPI.haversine_newpoint", "modulename": "relocation_impact_analyzer.g_api", "qualname": "GAPI.haversine_newpoint", "kind": "function", "doc": "<p>Determines a new latitude and longitude based on starting coordinates, distance, and bearing using the Haversine formula.</p>\n\n<p>This method calculates a new geographic location given a starting point, a distance to travel, and a bearing (direction) \nfrom the starting point. The calculation takes into account the curvature of the Earth.</p>\n\n<p>Args:\n    lat1 (float): Latitude of the starting point in degrees.\n    lon1 (float): Longitude of the starting point in degrees.\n    distance (float): Distance to move from the starting point in miles.\n    bearing (float): Direction to move in from the starting point in degrees.</p>\n\n<p>Returns:\n    tuple: A tuple containing the latitude and longitude (lat2, lon2) of the new point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lat1</span>, </span><span class=\"param\"><span class=\"n\">lon1</span>, </span><span class=\"param\"><span class=\"n\">distance</span>, </span><span class=\"param\"><span class=\"n\">bearing</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing", "modulename": "relocation_impact_analyzer.graphing", "kind": "module", "doc": "<p>Graphing utility class for the Relocation Impact Analysis Tool</p>\n\n<p>The Graphing class in this module is designed to support creating visual representations of commute data, offering insightful visual analytics \nfor relocation impact analysis. It harnesses the power of Matplotlib, Cartopy, and other scientific computing libraries to produce \ndetailed maps, heatmaps, and histograms. These visualizations can illustrate geographical distributions, commute distances and times, \nand other critical metrics such as CO2 emissions or cost implications of potential office relocations. The class provides methods to \nplot employee and office locations on maps with various base layers, including OpenStreetMap and Google Maps, and to draw commuting \nradii, convex hulls, and more. It supports filtering employees based on commute distances and times, enhancing decision-making with \nvisual data exploration tools. This module stands as a core component for analyzing the spatial aspects of commute data, aiding in \nthe evaluation of relocation strategies through comprehensive, easy-to-understand graphical outputs.</p>\n\n<p>Author: Victor Foulk\nLicense: MIT License\nDate: 2024-03-15\nVersion: 0.0.1 Pre-Alpha</p>\n"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.__init__", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.__init__", "kind": "function", "doc": "<p>Initializes the Graphing class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.configure_map_plot", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.configure_map_plot", "kind": "function", "doc": "<p>Configures a map plot with specified latitudes and longitudes and an optional background imagery source.</p>\n\n<p>Args:\n    latitudes (list): A list of latitude coordinates for plotting.\n    longitudes (list): A list of longitude coordinates for plotting.\n    imagery (str, optional): The background imagery source. Options include \"OSM\" (default), \"Google\", and \"GoogleSatellite\".\n    padding (float, optional): Padding around the coordinate extents to ensure all points are visible on the map.</p>\n\n<p>Returns:\n    tuple: A tuple containing the figure and axis objects of the map plot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">latitudes</span>, </span><span class=\"param\"><span class=\"n\">longitudes</span>, </span><span class=\"param\"><span class=\"n\">imagery</span><span class=\"o\">=</span><span class=\"s1\">&#39;OSM&#39;</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mf\">0.03</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.plot_addresses", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.plot_addresses", "kind": "function", "doc": "<p>Plots address points on the map.</p>\n\n<p>Args:\n    ax: The matplotlib axes object on which to plot.\n    data (DataFrame): The data containing 'latitude' and 'longitude' columns for the points to plot.\n    color (str, optional): The color of the points. Defaults to 'red'.\n    label (str, optional): Label for the points. Defaults to None.\n    s (int, optional): Size of the points. Defaults to 10.\n    alpha (float, optional): Transparency of the points. Defaults to 1.0.\n    linestyle (str, optional): Style of the point lines. Defaults to '' (solid).\n    marker (str, optional): Shape of the points. Defaults to 'o' (circle).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span>,</span><span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">linestyle</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;o&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.plot_offices", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.plot_offices", "kind": "function", "doc": "<p>Plots office location points on the map.</p>\n\n<p>Args:\n    ax: The matplotlib axes object on which to plot.\n    data (DataFrame): The data containing 'latitude' and 'longitude' columns for the points to plot.\n    color (str, optional): The color of the points. Defaults to 'black'.\n    label (str, optional): Label for the points. Defaults to None.\n    s (int, optional): Size of the points. Defaults to 100.\n    alpha (float, optional): Transparency of the points. Defaults to 1.0.\n    linestyle (str, optional): Style of the point lines. Defaults to '' (solid).\n    marker (str, optional): Shape of the points. Defaults to '*' (star).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span>,</span><span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">linestyle</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;*&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.add_scalebar", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.add_scalebar", "kind": "function", "doc": "<p>Adds a scale bar to the map plot.</p>\n\n<p>Args:\n    ax: The matplotlib axes object to add the scale bar to.\n    location (tuple, optional): A tuple (x, y) representing the location of the scale bar as a fraction of the axis dimensions. \n    Defaults to (0.05, 0.05).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">location</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.05</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">font_mod</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.round_to_nearest_order_of_magnitude", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.round_to_nearest_order_of_magnitude", "kind": "function", "doc": "<p>Rounds a number to the nearest order of magnitude.</p>\n\n<p>Args:\n    number (float): The number to round.</p>\n\n<p>Returns:\n    float: The rounded number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.calculate_zoom_level", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.calculate_zoom_level", "kind": "function", "doc": "<p>Calculate an appropriate zoom level for a Cartopy axis based on its extent.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>ax: The Cartopy GeoAxes object.</li>\n<li>tile_service_resolution: The resolution of the tile service (256 for most web services).</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>An integer zoom level.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">tile_service_resolution</span><span class=\"o\">=</span><span class=\"mi\">256</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.filter_radius", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.filter_radius", "kind": "function", "doc": "<p>Filters source points based on their linear distance from target points within a specified radius.</p>\n\n<p>Args:\n    sources (DataFrame): A DataFrame containing source points with 'latitude' and 'longitude' columns.\n    targets (DataFrame): A DataFrame containing target points with 'latitude' and 'longitude' columns.\n    radius (float): The radius within which to filter source points, in miles.\n    inside (bool, optional): If True, filters for source points inside the radius. If False, filters for source points \n    outside the radius. Defaults to True.</p>\n\n<p>Returns:\n    DataFrame: A DataFrame of filtered source points that meet the radius criteria.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sources</span>, </span><span class=\"param\"><span class=\"n\">targets</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">inside</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.filter_drive_distance", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.filter_drive_distance", "kind": "function", "doc": "<p>Filters source points based on the driving distance to target points using commute data.</p>\n\n<p>Args:\n    sources (DataFrame): A DataFrame containing source points with 'latitude' and 'longitude' columns.\n    targets (DataFrame): A DataFrame containing target points with 'latitude' and 'longitude' columns.\n    radius (float): The radius within which to filter source points, in miles.\n    commute_data (DataFrame): A DataFrame containing commute data between source and target points.\n    inside (bool, optional): If True, filters for source points within the driving distance radius. If False, \n    filters for source points outside the radius. Defaults to True.</p>\n\n<p>Returns:\n    DataFrame: A DataFrame of filtered source points that meet the driving distance criteria.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sources</span>, </span><span class=\"param\"><span class=\"n\">targets</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">commute_data</span>, </span><span class=\"param\"><span class=\"n\">inside</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.filter_drive_time", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.filter_drive_time", "kind": "function", "doc": "<p>Filters source points based on the driving time to target points using commute data.</p>\n\n<p>Args:\n    sources (DataFrame): A DataFrame containing source points with 'latitude' and 'longitude' columns.\n    targets (DataFrame): A DataFrame containing target points with 'latitude' and 'longitude' columns.\n    minutes (float): The maximum driving time in minutes within which to filter source points.\n    commute_data (DataFrame): A DataFrame containing commute data between source and target points.\n    inside (bool, optional): If True, filters for source points within the specified driving time. If False, filters for source points outside the driving time. Defaults to True.</p>\n\n<p>Returns:\n    DataFrame: A DataFrame of filtered source points that meet the driving time criteria.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sources</span>, </span><span class=\"param\"><span class=\"n\">targets</span>, </span><span class=\"param\"><span class=\"n\">minutes</span>, </span><span class=\"param\"><span class=\"n\">commute_data</span>, </span><span class=\"param\"><span class=\"n\">inside</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.get_common_points", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.get_common_points", "kind": "function", "doc": "<p>Finds common points between two sets of latitudes and longitudes.</p>\n\n<p>Args:\n    set1 (DataFrame): A DataFrame containing 'latitude' and 'longitude' columns.\n    set2 (DataFrame): A DataFrame containing 'latitude' and 'longitude' columns.</p>\n\n<p>Returns:\n    DataFrame: A DataFrame of common points between the two sets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">set1</span>, </span><span class=\"param\"><span class=\"n\">set2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.get_unique_points", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.get_unique_points", "kind": "function", "doc": "<p>Finds unique points in the first set that are not present in the second set.</p>\n\n<p>Args:\n    set1 (DataFrame): A DataFrame containing 'latitude' and 'longitude' columns.\n    set2 (DataFrame): A DataFrame containing 'latitude' and 'longitude' columns.</p>\n\n<p>Returns:\n    DataFrame: A DataFrame of unique points in the first set.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">set1</span>, </span><span class=\"param\"><span class=\"n\">set2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.haversine", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.haversine", "kind": "function", "doc": "<p>Calculates the great-circle distance between two points on the Earth specified in decimal degrees using the Haversine formula.</p>\n\n<p>Args:\n    lat1 (float): Latitude of the first point.\n    lon1 (float): Longitude of the first point.\n    lat2 (float): Latitude of the second point.\n    lon2 (float): Longitude of the second point.</p>\n\n<p>Returns:\n    float: The distance between the two points in miles.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lat1</span>, </span><span class=\"param\"><span class=\"n\">lon1</span>, </span><span class=\"param\"><span class=\"n\">lat2</span>, </span><span class=\"param\"><span class=\"n\">lon2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.haversine_newpoint", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.haversine_newpoint", "kind": "function", "doc": "<p>Calculates a new point given a distance and bearing from a starting point using the Haversine formula.</p>\n\n<p>Args:\n    lat1 (float): Latitude of the starting point.\n    lon1 (float): Longitude of the starting point.\n    distance (float): Distance from the starting point in miles.\n    bearing (float): Bearing in degrees from the starting point to the new point.</p>\n\n<p>Returns:\n    tuple: A tuple (lat2, lon2) representing the latitude and longitude of the new point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lat1</span>, </span><span class=\"param\"><span class=\"n\">lon1</span>, </span><span class=\"param\"><span class=\"n\">distance</span>, </span><span class=\"param\"><span class=\"n\">bearing</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.plot_ellipses", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.plot_ellipses", "kind": "function", "doc": "<p>Draws ellipses around office locations to represent the commute radius from each office.</p>\n\n<p>Args:\n    ax: The matplotlib axes object on which to draw.\n    offices (DataFrame): A DataFrame containing office locations with 'latitude' and 'longitude' columns.\n    commute_radius (float): The radius to draw around each office location, in miles.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">offices</span>, </span><span class=\"param\"><span class=\"n\">commute_radius</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.plot_elines", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.plot_elines", "kind": "function", "doc": "<p>Draws lines (elipses) around target points to represent a specified radius from each point on a map.</p>\n\n<p>Args:\n    ax: The matplotlib axes object on which to draw.\n    targets (DataFrame): A DataFrame containing target points with 'latitude' and 'longitude' columns.\n    commute_radius (float): The radius around each target point to draw, in miles.\n    color (str, optional): Color of the lines. Defaults to 'black'.\n    linestyle (str, optional): Style of the line. Defaults to '--'.\n    linewidth (int, optional): Width of the lines. Defaults to 2.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span>,</span><span class=\"param\">\t<span class=\"n\">targets</span>,</span><span class=\"param\">\t<span class=\"n\">commute_radius</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linestyle</span><span class=\"o\">=</span><span class=\"s1\">&#39;--&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.create_eline", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.create_eline", "kind": "function", "doc": "<p>Creates a set of latitude and longitude points that form a circle (or ellipse) around a central point.</p>\n\n<p>Args:\n    lat (float): Latitude of the central point.\n    long (float): Longitude of the central point.\n    r (float): Radius of the circle in miles.\n    step (int, optional): Degrees between each point on the circle. Smaller values create a smoother circle. Defaults to 10.</p>\n\n<p>Returns:\n    tuple: Two lists containing the longitude and latitude of points forming the circle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">long</span>, </span><span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.plot_convex_hull", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.plot_convex_hull", "kind": "function", "doc": "<p>Draws a convex hull around a set of points on the map, effectively creating a boundary that encloses all the points.</p>\n\n<p>Args:\n    ax: The matplotlib axes object on which to draw.\n    data (DataFrame): A DataFrame containing points with 'latitude' and 'longitude' columns.\n    color (str, optional): Color of the convex hull boundary. Defaults to 'green'.\n    linestyle (str, optional): Style of the hull boundary line. Defaults to '--'.\n    linewidth (int, optional): Width of the hull boundary line. Defaults to 2.\n    linealpha (float, optional): Transparency of the hull boundary line. Defaults to 0.\n    fillalpha (float, optional): Transparency of the hull fill. Defaults to 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;green&#39;</span>, </span><span class=\"param\"><span class=\"n\">linestyle</span><span class=\"o\">=</span><span class=\"s1\">&#39;--&#39;</span>, </span><span class=\"param\"><span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.get_commute_values", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.get_commute_values", "kind": "function", "doc": "<p>Extracts specified values from the commute data for employee addresses that match a given office location.</p>\n\n<p>Args:\n    emp (DataFrame): A DataFrame containing employee locations with 'latitude' and 'longitude'.\n    office (DataFrame): A single-row DataFrame containing the target office location with 'latitude' and 'longitude'.\n    commute_data (DataFrame): A DataFrame containing commute data between employee and office locations.\n    values (list of str or str): Column name(s) in <code>commute_data</code> to extract. Can be a single column name or a list of names.</p>\n\n<p>Returns:\n    DataFrame: A DataFrame containing the extracted values for each employee location that matches the given office location. The DataFrame includes 'latitude' and 'longitude' of the employee locations and the specified <code>values</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">emp</span>, </span><span class=\"param\"><span class=\"n\">office</span>, </span><span class=\"param\"><span class=\"n\">commute_data</span>, </span><span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.plot_preamble", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.plot_preamble", "kind": "function", "doc": "<p>Filters employee locations based on a specified cutoff radius from office locations and prepares data for plotting.</p>\n\n<p>Args:\n    emp (DataFrame): DataFrame containing employee locations with 'latitude' and 'longitude'.\n    offices (DataFrame): DataFrame containing office locations with 'latitude' and 'longitude'.\n    cutoff_radius (float, optional): Radius in miles to filter employee locations. Only employee locations within this radius from any office location are included.\n    cutoff_distance (float, optional): Driving distance in miles to filter employee locations. Only employee locations within this distance from any office location are included.\n    commute_data (DataFrame): A DataFrame containing commute data between employee and office locations, required if <code>cutoff_distance</code> is specified.</p>\n\n<p>Returns:\n    tuple: A tuple containing the filtered employee DataFrame, and Series objects for latitudes and longitudes of all included \n    locations (employees and offices combined). The filtered DataFrame only includes employees within the <code>cutoff_radius</code> from \n    any office location if specified.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">emp</span>,</span><span class=\"param\">\t<span class=\"n\">offices</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff_radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff_distance</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">commute_data</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.get_map_view", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.get_map_view", "kind": "function", "doc": "<p>Generates a map view showing employee and office locations, optionally with commute radius and coloring based on commute data.</p>\n\n<pre><code>    Args:\n        emp (DataFrame): DataFrame containing employee locations with 'latitude' and 'longitude'.\n        offices (DataFrame): DataFrame containing office locations with 'latitude' and 'longitude'.\n        commute_data (DataFrame, optional): DataFrame containing commute data between employee and office locations. Required if commute_color is True.\n        cutoff_radius (float, optional): Radius in miles to filter employee locations for visualization.\n        cutoff_distance (float, optional): Driving distance in miles to filter employee locations for visualization.\n        commute_radius (float, optional): Radius in miles from offices to visualize commute boundaries.\n        commute_color (bool, optional): If True, colors employee locations based on commute data presence within commute_radius.\n        title (str, optional): Title for the map.\n        convex_hull (bool, optional): If True, draws a convex hull around employee locations within commute_radius.\n        size_e (int, optional): Size of markers for employee locations. Defaults to 10.\n        size_o (int, optional): Size of markers for office locations. Defaults to 200.\n        color_o (str, optional): Color for office location markers. Defaults to 'black'.\n        color_e_in (str, optional): Color for employee locations within commute_radius. Defaults to 'green'.\n        color_e_out (str, optional): Color for employee locations outside commute_radius. Defaults to 'red'.\n        legend_loc (str, optional): Location of the legend on the map. Defaults to 'upper right'.\n        o_label (str, optional): Label for office locations in the legend. Defaults to 'Potential Office\n</code></pre>\n\n<p>Locations'.\n            e_label (str, optional): Label for employee locations in the legend. Defaults to 'Employee Addresses'.\n            manual_plot (bool, optional): If True, returns the matplotlib plt and axes objects for manual plotting. Defaults to False.\n            font_mod (int, optional): Font size modifier for scale bar. Defaults to 1.</p>\n\n<pre><code>    Returns:\n        tuple: A tuple containing the matplotlib plt and axes objects.\n\n    Notes:\n        - Requires `commute_data` for commute_color functionality.\n        - Adjust `cutoff_radius` and `commute_radius` to fine-tune the visualization.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">emp</span>,</span><span class=\"param\">\t<span class=\"n\">offices</span>,</span><span class=\"param\">\t<span class=\"n\">commute_data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff_radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff_distance</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">commute_radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">commute_color</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">convex_hull</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">size_e</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">size_o</span><span class=\"o\">=</span><span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">color_o</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_e_in</span><span class=\"o\">=</span><span class=\"s1\">&#39;green&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_e_out</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">legend_loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper right&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">o_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Potential Office </span><span class=\"se\">\\n</span><span class=\"s1\">Locations&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">e_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Employee Addresses&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">manual_plot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">font_mod</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.map_view_standard_legend", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.map_view_standard_legend", "kind": "function", "doc": "<p>Adds a standard legend to a map view plot.</p>\n\n<p>Args:\n    ax: The matplotlib axes object on which to draw the legend.\n    handles (list): A list of handles to the objects being represented in the legend.\n    labels (list): A list of labels for the objects being represented in the legend.\n    title (str, optional): Title for the legend. Defaults to None.\n    legend_title (str, optional): Title for the legend. Defaults to None.\n    legend_loc (str, optional): Location for the legend. Defaults to 'upper left'.\n    legend_labels (list, optional): Labels for the legend entries. Defaults to None.\n    legend_colors (list, optional): Colors for the legend entries. Defaults to None.\n    legend_markers (list, optional): Markers for the legend entries. Defaults to None.\n    legend_edgecolor (str, optional): Edge color for the legend. Defaults to 'black'.\n    legend_frameon (bool, optional): Whether to draw a frame around the legend. Defaults to True.\n    legend_facecolor (str, optional): Face color for the legend. Defaults to 'white'.\n    legend_framealpha (float, optional): Opacity of the legend frame. Defaults to 0.7.\n    fontsize (int, optional): Font size for the legend. Defaults to 10.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span>,</span><span class=\"param\">\t<span class=\"n\">handles</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper left&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">legend_edgecolor</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">legend_frameon</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">legend_facecolor</span><span class=\"o\">=</span><span class=\"s1\">&#39;white&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">legend_framealpha</span><span class=\"o\">=</span><span class=\"mf\">0.7</span>,</span><span class=\"param\">\t<span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.get_heatmap", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.get_heatmap", "kind": "function", "doc": "<p>Generates a heatmap of a specific commute data metric for employee locations relative to a single office location.</p>\n\n<pre><code>    Args:\n        emp (DataFrame): DataFrame containing employee locations with columns 'latitude' and 'longitude'.\n        office (DataFrame): Single-row DataFrame representing the target office location with columns 'latitude' and 'longitude'.\n        commute_data (DataFrame): DataFrame containing commute data metrics between employee locations and office locations.\n        value (str): The name of the column in `commute_data` representing the metric to visualize on the heatmap.\n        title (str, optional): Title for the heatmap. Defaults to None.\n        value_label (str, optional): Label for the color bar indicating the metric. Defaults to ''.\n        cutoff_radius (float, optional): Radius in miles to include employee locations from the office for the heatmap. Defaults to None.\n        cutoff_distance (float, optional): Driving distance in miles to include employee locations from the office for the heatmap. Defaults to None.\n        commute_radius (float, optional): Specifies the radius within which employees are considered for the heatmap. Defaults to None.\n        convex_hull (bool, optional): If True, draw a convex hull around the employee locations included in the heatmap. Defaults to False.\n        plot_points (bool, optional): If True, plot individual employee locations on the heatmap. Defaults to False.\n        imagery (str, optional): Background map style. Supports \"OSM\" for OpenStreetMap and \"Google\" for Google Maps tiles. Defaults to \"OSM\".\n        cmap (str, optional): Colormap for the heatmap. Defaults to 'jet'.\n        size_e (int, optional): Size of markers for employee locations. Defaults to 10.\n        size_o (int, optional): Size of markers for office locations. Defaults to 200.\n        color_o (str, optional): Color for office location markers. Defaults to 'black'.\n        color_e_in (str, optional): Color for employee locations within commute_radius. Defaults to 'green'.\n        color_e_out (str, optional): Color for employee locations outside commute_radius. Defaults to 'red'.\n        o_label (str, optional): Label for office locations in the legend. Defaults to 'Potential Office\n</code></pre>\n\n<p>Locations'.\n            e_label (str, optional): Label for employee locations in the legend. Defaults to 'Employee Addresses'.\n            manual_plot (bool, optional): If True, returns the matplotlib plt and axes objects for manual plotting. Defaults to False.\n            alpha (float, optional): Transparency of the heatmap. Defaults to 0.5.\n            levels (int, optional): Number of levels for the color bar. Defaults to 10.\n            font_mod (int, optional): Font size modifier for the plot. Defaults to 1.\n            figsize (tuple, optional): Figure size. Defaults to (15, 15).</p>\n\n<pre><code>    Returns:\n        tuple: A tuple containing the matplotlib figure and axes objects.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">emp</span>,</span><span class=\"param\">\t<span class=\"n\">office</span>,</span><span class=\"param\">\t<span class=\"n\">commute_data</span>,</span><span class=\"param\">\t<span class=\"n\">value</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff_radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff_distance</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">commute_radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">convex_hull</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_points</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">imagery</span><span class=\"o\">=</span><span class=\"s1\">&#39;OSM&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;jet&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">size_e</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">size_o</span><span class=\"o\">=</span><span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">color_o</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_e_in</span><span class=\"o\">=</span><span class=\"s1\">&#39;green&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_e_out</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">o_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Potential Office </span><span class=\"se\">\\n</span><span class=\"s1\">Locations&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">e_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Employee Addresses&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">manual_plot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">font_mod</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.get_histogram", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.get_histogram", "kind": "function", "doc": "<p>Generates a histogram (or set of histograms) for specified commute data metrics for employee locations relative to a single office location.</p>\n\n<p>Args:\n    emp (DataFrame): DataFrame containing employee locations with columns 'latitude' and 'longitude'.\n    office (DataFrame): Single-row DataFrame representing the target office location.\n    commute_data (DataFrame): DataFrame containing commute data metrics between employee locations and office locations.\n    values (list of str): Names of the columns in <code>commute_data</code> representing the metrics to visualize in the histograms.\n    title (str, optional): Main title for the histogram plot(s). Defaults to None.\n    suptitle (str, optional): Supplementary title for the whole figure. Defaults to None.\n    value_label (str, optional): Label for the metric values. Defaults to ''.\n    x_label (str, optional): Label for the x-axis. Defaults to ''.\n    y_label (str, optional): Label for the y-axis. Defaults to ''.\n    cutoff_radius (float, optional): Radius in miles to include employee locations from the office for the histograms. Defaults to None.\n    commute_radius (float, optional): Specifies the radius within which employees are considered for the histograms. Defaults to None.\n    bins (int, optional): Number of bins for the histograms. Defaults to 10.\n    rows (int, optional): Number of rows in the subplot grid. Defaults to 1.\n    cols (int, optional): Number of columns in the subplot grid. Defaults to 1.\n    figsize (tuple, optional): Figure size. Defaults to (15, 15).\n    column_titles (list of str, optional): Titles for each subplot column. Defaults to None.\n    cumulative_line (bool, optional): If True, add a cumulative percentage line to the histograms. Defaults to False.\n    cumulative_y_label (str, optional): Label for the cumulative percentage y-axis. Defaults to \"Cumulative %\".\n    cumulative_color (str, optional): Color for the cumulative line. Defaults to 'black'.\n    cumulative_linestyle (str, optional): Line style for the cumulative line. Defaults to '--'.\n    cumulative_linewidth (int, optional): Line width for the cumulative line. Defaults to 1.\n    cumulative_markers (dict, optional): Dictionary specifying markers for specific cumulative percentages on the line. Format {%value(float or int): {style_arguments:values}}, not all values need to be present. Defaults to False.\n    cumulative_as_percentage (bool, optional): If True, the cumulative line is displayed as a percentage. Defaults to True.\n    font_mod (int, optional): Font size modifier for the plot. Defaults to 1.\n    manual_plot (bool, optional): If True, returns the matplotlib plt and axes objects for manual plotting. Defaults to False.\n    override_values (DataFrame, optional): DataFrame to override default values for the plot. Defaults to None.\n    sharex (bool, optional): If True, share x-axis between subplots. Defaults to False.\n    sharey (bool, optional): If True, share y-axis between subplots. Defaults to False.</p>\n\n<p>Returns:\n    tuple: A tuple containing the matplotlib figure and axes objects.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">emp</span>,</span><span class=\"param\">\t<span class=\"n\">office</span>,</span><span class=\"param\">\t<span class=\"n\">commute_data</span>,</span><span class=\"param\">\t<span class=\"n\">values</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">suptitle</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff_radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">commute_radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">column_titles</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative_line</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative_y_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Cumulative %&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative_linestyle</span><span class=\"o\">=</span><span class=\"s1\">&#39;--&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative_linewidth</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative_markers</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative_as_percentage</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">font_mod</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">manual_plot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">override_values</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sharex</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sharey</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.get_scatterplot", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.get_scatterplot", "kind": "function", "doc": "<p>Generates a scatterplot for selected commute (or provided) data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">emp</span>,</span><span class=\"param\">\t<span class=\"n\">office</span>,</span><span class=\"param\">\t<span class=\"n\">commute_data</span>,</span><span class=\"param\">\t<span class=\"n\">x_value</span>,</span><span class=\"param\">\t<span class=\"n\">y_value</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff_radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">commute_radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">manual_plot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">override_values</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_mod</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.graphing.Graphing.get_piechart", "modulename": "relocation_impact_analyzer.graphing", "qualname": "Graphing.get_piechart", "kind": "function", "doc": "<p>Generates a pie chart or charts for selected commute data.</p>\n\n<p>Args:\n    values (str or list): Names of the columns in <code>commute_data</code> representing the metrics to visualize in the pie chart(s).\n    title (str, optional): Title for the pie chart(s). Defaults to None.\n    suptitle (str, optional): Supplementary title for the whole figure. Defaults to None.\n    value_labels (str or list, optional): Labels for the values in the pie chart(s). Defaults to ''.\n    figsize (tuple, optional): Figure size. Defaults to None.\n    manual_plot (bool, optional): If True, returns the matplotlib plt and axes objects for manual plotting. Defaults to False.\n    font_mod (int, optional): Font size modifier for the plot. Defaults to 1.\n    rows (int, optional): Number of rows in the subplot grid. Defaults to 1.\n    cols (int, optional): Number of columns in the subplot grid. Defaults to 1.\n    startangle (int, optional): Starting angle for the pie chart. Defaults to 90.\n    colors (list, optional): List of colors for the pie chart. For multi-row/col, list of lists. Defaults to None.</p>\n\n<p>Returns:\n    tuple: A tuple containing the matplotlib figure and axes objects.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">values</span>,</span><span class=\"param\">\t<span class=\"n\">titles</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">suptitle</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">manual_plot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">font_mod</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">startangle</span><span class=\"o\">=</span><span class=\"mi\">90</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project", "modulename": "relocation_impact_analyzer.project", "kind": "module", "doc": "<p>Project class for the Relocation Impact Analysis Tool</p>\n\n<p>The Project class is responsible for managing all aspects of a project within the relocation impact analysis tool. \nIt encapsulates functionalities related to project setup, data management, and configuration handling. This includes \ncreating new projects, loading and saving project configurations, managing data files (CSV format) for various aspects \nof the project (e.g., employee and office addresses, GPS coordinates), and ensuring the data integrity and structure \nconforms to expected formats. The class also provides utilities for accessing and manipulating project-specific data, \nsupporting the broader analysis tasks by maintaining a central repository of the project's data and state.</p>\n\n<p>Author: Victor Foulk\nLicense: MIT License\nDate: 2024-03-15\nVersion: 0.0.1 Pre-Alpha</p>\n"}, {"fullname": "relocation_impact_analyzer.project.Project", "modulename": "relocation_impact_analyzer.project", "qualname": "Project", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.project.Project.__init__", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.__init__", "kind": "function", "doc": "<p>Initializes a new Project instance with optional project name, directory, and configuration settings.</p>\n\n<p>Args:\n    proj (str, optional): The name of the project to initialize or load. If None, a project is not immediately loaded or created.\n    project_directory (str, optional): The filesystem path to the directory where project files are stored. If None, defaults to a 'projects' directory within the current working directory.\n    default_configuration (bool, optional): Indicates whether the project should be initialized with default configuration settings. Defaults to True.</p>\n\n<p>This constructor sets up the initial environment for managing a project, including setting default data file definitions and project attributes. \nIf a project name is provided, it attempts to load the project from the specified directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">proj</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">project_directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">default_configuration</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "relocation_impact_analyzer.project.Project.default_configuration", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.default_configuration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.project.Project.data_file_definitions", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.data_file_definitions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.project.Project.project_file_attributes", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.project_file_attributes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.project.Project.default_project_directory", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.default_project_directory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.project.Project.flush_project", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.flush_project", "kind": "function", "doc": "<p>Resets the project's attributes and data containers to their initial state.</p>\n\n<p>This method is used to reinitialize the project's attributes, effectively clearing any existing project data in memory. \nIt is useful when starting a new project or clearing the current project's state without loading another project.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.load_project", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.load_project", "kind": "function", "doc": "<p>Attempts to load an existing project by name from the project directory.</p>\n\n<p>Args:\n    proj (str): The name of the project to load.</p>\n\n<p>If the specified project exists, this method loads the project's configuration and data from the corresponding 'project.json' \nfile within the project's directory. If the project or configuration file does not exist, it prompts to create a new project template.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">proj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.load_project_file", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.load_project_file", "kind": "function", "doc": "<p>Loads the project's configuration from its 'project.json' file into the project attributes.</p>\n\n<p>This method reads the project configuration file and updates the project's attributes according to the file's contents. \nIt is called internally when a project is loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.new_project", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.new_project", "kind": "function", "doc": "<p>Creates a new project directory and initializes a blank project configuration.</p>\n\n<p>Args:\n    proj (str): The name of the new project to create.</p>\n\n<p>This method sets up a new project by creating the necessary directory structure and initializing a blank project \nconfiguration file if the specified project does not already exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">proj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.save_project", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.save_project", "kind": "function", "doc": "<p>Saves the current project's configuration and data files to disk.</p>\n\n<p>This method serializes the project's attributes to a 'project.json' configuration file and saves any loaded \ndata frames to their respective CSV files within the project's directory. It ensures that the project's current \nstate is persisted to disk.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.delete_project", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.delete_project", "kind": "function", "doc": "<p>Saves the current project's configuration and data files to disk.</p>\n\n<p>This method serializes the project's attributes to a 'project.json' configuration file and saves any loaded \ndata frames to their respective CSV files within the project's directory. It ensures that the project's current \nstate is persisted to disk.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.list_data_files", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.list_data_files", "kind": "function", "doc": "<p>Lists all data files present in the current project's directory.</p>\n\n<p>Scans the project directory for CSV files, which are considered data files associated with the project, and returns a list of these filenames.</p>\n\n<p>Returns:\n    list: A list of filenames (str) of data files found in the project directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.save_data_file", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.save_data_file", "kind": "function", "doc": "<p>Saves the specified data frame to a CSV file within the project directory.</p>\n\n<p>Args:\n    file_name (str): The name of the data file to save.</p>\n\n<p>Validates the format of the data frame against expected column definitions and writes the data frame to a CSV file. \nIf validation fails, the method returns False.</p>\n\n<p>Returns:\n    bool or str: The filename if the data file is successfully saved; otherwise, False if the validation fails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.delete_data_file", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.delete_data_file", "kind": "function", "doc": "<p>Deletes a specified data file from the project directory.</p>\n\n<p>Args:\n    file_name (str): The name of the data file to delete.</p>\n\n<p>Checks if the file exists within the list of project data files and deletes it if found. Also clears the \ncorresponding data frame from the project's data container.</p>\n\n<p>Returns:\n    bool: True if the file was successfully deleted; False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.load_data_file", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.load_data_file", "kind": "function", "doc": "<p>Loads data from a specified CSV file into a pandas DataFrame and stores it in the project's data container.</p>\n\n<p>Args:\n    file_name (str): The name of the data file to load.</p>\n\n<p>Validates the presence of the data file in the project directory and attempts to load its contents into a DataFrame, which is then stored within the project's data container under the same filename.</p>\n\n<p>Returns:\n    bool: True if the data file is successfully loaded; False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.validate_data_file", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.validate_data_file", "kind": "function", "doc": "<p>Validates the structure of a DataFrame against expected column definitions for a specific data file.</p>\n\n<p>Args:\n    file_name (str): The name of the data file for which the DataFrame is being validated.</p>\n\n<p>Ensures that the DataFrame associated with the file name contains all required columns.</p>\n\n<p>Returns:\n    bool: True if the DataFrame's columns match the expected definitions; False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_name</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.validate_dataframe", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.validate_dataframe", "kind": "function", "doc": "<p>Validates the structure of a DataFrame against expected column definitions for a specific data file.</p>\n\n<p>Args:\n    file_name (str): The name of the data file for which the DataFrame is being validated.</p>\n\n<p>Ensures that the DataFrame associated with the file name contains all required columns.</p>\n\n<p>Returns:\n    bool: True if the DataFrame's columns match the expected definitions; False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.start_dataframe", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.start_dataframe", "kind": "function", "doc": "<p>Initializes a new DataFrame with the correct columns for a specified data file type.</p>\n\n<p>Args:\n    file_name (str): The name of the data file type to initialize a DataFrame for.</p>\n\n<p>The method uses the data file definitions to create an empty DataFrame with the appropriate columns for the specified file type.</p>\n\n<p>Returns:\n    bool: True if the DataFrame is successfully initialized; False if the file_name does not match any known data file definition.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.get_employee_addresses", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.get_employee_addresses", "kind": "function", "doc": "<p>Retrieves the DataFrame containing requested addresses for the project.</p>\n\n<p>If the requested addresses data has not been loaded into the project's data container, this method attempts \nto load it from the corresponding CSV file within the project directory.</p>\n\n<p>Returns:\n    pd.DataFrame: The DataFrame containing addresses, or an empty DataFrame if the data file does not exist or cannot be loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.get_emp_gps", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.get_emp_gps", "kind": "function", "doc": "<p>Retrieves the DataFrame containing requested lat/long data for the project.</p>\n\n<p>If the requested addresses data has not been loaded into the project's data container, this method attempts \nto load it from the corresponding CSV file within the project directory.</p>\n\n<p>Returns:\n    pd.DataFrame: The DataFrame containing employee lat/longs, or an empty DataFrame if the data file does not exist or cannot be loaded.</p>\n\n<p>An abstraction for employee gps data, if use gps fuzzing is enabled, return the fuzzed data, else return the original.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.get_employee_gps", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.get_employee_gps", "kind": "function", "doc": "<p>Retrieves the DataFrame containing requested lat/long data for the project.</p>\n\n<p>If the requested data has not been loaded into the project's data container, this method attempts \nto load it from the corresponding CSV file within the project directory.</p>\n\n<p>Returns:\n    pd.DataFrame: The DataFrame containing employee lat/longs, or an empty DataFrame if the data file does not exist or cannot be loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.get_gps_fuzz", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.get_gps_fuzz", "kind": "function", "doc": "<p>Retrieves the DataFrame containing requested lat/long data for the project.</p>\n\n<p>If the requested data has not been loaded into the project's data container, this method attempts \nto load it from the corresponding CSV file within the project directory.</p>\n\n<p>Returns:\n    pd.DataFrame: The DataFrame containing fuzzed employee lat/longs, or an empty DataFrame if the data file does not exist or cannot be loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.get_office_addresses", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.get_office_addresses", "kind": "function", "doc": "<p>Retrieves the DataFrame containing requested addresses for the project.</p>\n\n<p>If the requested addresses data has not been loaded into the project's data container, this method attempts \nto load it from the corresponding CSV file within the project directory.</p>\n\n<p>Returns:\n    pd.DataFrame: The DataFrame containing addresses, or an empty DataFrame if the data file does not exist or cannot be loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.get_office_gps", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.get_office_gps", "kind": "function", "doc": "<p>Retrieves the DataFrame containing requested lat/long data for the project.</p>\n\n<p>If the requested data has not been loaded into the project's data container, this method attempts \nto load it from the corresponding CSV file within the project directory.</p>\n\n<p>Returns:\n    pd.DataFrame: The DataFrame containing office lat/longs, or an empty DataFrame if the data file does not exist or cannot be loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.project.Project.get_commute_data", "modulename": "relocation_impact_analyzer.project", "qualname": "Project.get_commute_data", "kind": "function", "doc": "<p>Retrieves the DataFrame containing requested commute_data table for the project.</p>\n\n<p>If the requested data has not been loaded into the project's data container, this method attempts \nto load it from the corresponding CSV file within the project directory.</p>\n\n<p>Returns:\n    pd.DataFrame: The DataFrame containing all lat/long source/destination combinations and the resulting\n    calculations and analyses, or an empty DataFrame if the data file does not exist or cannot be loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui", "modulename": "relocation_impact_analyzer.ui", "kind": "module", "doc": "<p>User Interface for the Relocation Impact Analyzer</p>\n\n<p>The HTTP_UI class implements a simple HTTP server to serve as the user interface for the Relocation Impact Analyzer. \nIt handles HTTP GET and POST requests, providing a web-based interface for creating, managing, and analyzing projects. \nThis interface allows users to upload data files, view project status, and initiate analysis tasks directly from their web browsers.</p>\n\n<p>This server is built using Python's http.server module and is designed for ease of use and demonstration purposes only. \nIt is not secure for public or production deployment without additional security measures. Features include project creation and deletion, \ndata file management, analysis phase tracking, and status updates on long-running tasks such as address geocoding or commute data generation.</p>\n\n<p>Author: Victor Foulk\nLicense: MIT License\nDate: 2024-03-15\nVersion: 0.0.1 Pre-Alpha</p>\n"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI", "kind": "class", "doc": "<p>HTTP request handler base class.</p>\n\n<p>The following explanation of HTTP serves to guide you through the\ncode as well as to expose any misunderstandings I may have about\nHTTP (so you don't need to read the code to figure out I'm wrong\n:-).</p>\n\n<p>HTTP (HyperText Transfer Protocol) is an extensible protocol on\ntop of a reliable stream transport (e.g. TCP/IP).  The protocol\nrecognizes three parts to a request:</p>\n\n<ol>\n<li>One line identifying the request type and path</li>\n<li>An optional set of RFC-822-style headers</li>\n<li>An optional data part</li>\n</ol>\n\n<p>The headers and data are separated by a blank line.</p>\n\n<p>The first line of the request has the form</p>\n\n<p><command> <path> <version></p>\n\n<p>where <command> is a (case-sensitive) keyword such as GET or POST,\n<path> is a string containing path information for the request,\nand <version> should be the string \"HTTP/1.0\" or \"HTTP/1.1\".\n<path> is encoded using the URL encoding scheme (using %xx to signify\nthe ASCII character with hex code xx).</p>\n\n<p>The specification specifies that lines are separated by CRLF but\nfor compatibility with the widest range of clients recommends\nservers also handle LF.  Similarly, whitespace in the request line\nis treated sensibly (allowing multiple spaces between components\nand allowing trailing whitespace).</p>\n\n<p>Similarly, for output, lines ought to be separated by CRLF pairs\nbut most clients grok LF characters just fine.</p>\n\n<p>If the first line of the request has the form</p>\n\n<p><command> <path></p>\n\n<p>(i.e. <version> is left out) then this is assumed to be an HTTP\n0.9 request; this form has no optional headers and data part and\nthe reply consists of just the data.</p>\n\n<p>The reply form of the HTTP 1.x protocol again has three parts:</p>\n\n<ol>\n<li>One line giving the response code</li>\n<li>An optional set of RFC-822-style headers</li>\n<li>The data</li>\n</ol>\n\n<p>Again, the headers and data are separated by a blank line.</p>\n\n<p>The response code line has the form</p>\n\n<p><version> <responsecode> <responsestring></p>\n\n<p>where <version> is the protocol version (\"HTTP/1.0\" or \"HTTP/1.1\"),\n<responsecode> is a 3-digit response code indicating success or\nfailure of the request, and <responsestring> is an optional\nhuman-readable string explaining what the response code means.</p>\n\n<p>This server parses the request and the headers, and then calls a\nfunction specific to the request type (<command>).  Specifically,\na request SPAM will be handled by a method do_SPAM().  If no\nsuch method exists the server sends an error response to the\nclient.  If it exists, it is called with no arguments:</p>\n\n<p>do_SPAM()</p>\n\n<p>Note that the request name is case sensitive (i.e. SPAM and spam\nare different requests).</p>\n\n<p>The various request details are stored in instance variables:</p>\n\n<ul>\n<li><p>client_address is the client IP address in the form (host,\nport);</p></li>\n<li><p>command, path and version are the broken-down request line;</p></li>\n<li><p>headers is an instance of email.message.Message (or a derived\nclass) containing the header information;</p></li>\n<li><p>rfile is a file object open for reading positioned at the\nstart of the optional input data part;</p></li>\n<li><p>wfile is a file object open for writing.</p></li>\n</ul>\n\n<p>IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!</p>\n\n<p>The first thing to be written must be the response line.  Then\nfollow 0 or more header lines, then a blank line, and then the\nactual data (if any).  The meaning of the header lines depends on\nthe command executed by the server; in most cases, when data is\nreturned, there should be at least one header line of the form</p>\n\n<p>Content-type: <type>/<subtype></p>\n\n<p>where <type> and <subtype> should be registered MIME types,\ne.g. \"text/html\" or \"text/plain\".</p>\n", "bases": "http.server.BaseHTTPRequestHandler"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.__init__", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.__init__", "kind": "function", "doc": "<p>Initializes the HTTP_UI instance with necessary attributes and calls the superclass initializer.</p>\n\n<p>This constructor sets up variables for managing template variable replacements, status messages, \nand error messages for dynamic content generation in response to HTTP requests.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.var_queue", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.var_queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.status_message", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.status_message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.status_error", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.status_error", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.do_GET", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.do_GET", "kind": "function", "doc": "<p>Handles GET requests to the HTTP server.</p>\n\n<p>This method serves various content based on the requested URL path, including static assets like images and the main index.html page. \nIt dynamically generates HTML content by replacing template variables based on the current state of projects and analysis. \nAlso handles special queries for project status updates and analysis phase information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.do_POST", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.do_POST", "kind": "function", "doc": "<p>Handles POST requests to the HTTP server, processing form data submitted by the user.</p>\n\n<p>This method supports updating system and project-specific variables, uploading data files, initiating analysis tasks, and more. \nAfter processing the POST data, it redirects to the GET handler to update the user interface accordingly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.get_graphs_template", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.get_graphs_template", "kind": "function", "doc": "<p>Generates HTML content for displaying graphs associated with a project.</p>\n\n<p>Args:\n    project (Project): The project object for which graphs are to be displayed.</p>\n\n<p>Returns:\n    str: A string containing HTML for embedding and interacting with project-specific graphs within the web interface.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">project</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.get_tables_template", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.get_tables_template", "kind": "function", "doc": "<p>Generates HTML content for displaying tables associated with a project.</p>\n\n<p>Args:\n    project (Project): The project object for which tables are to be displayed.</p>\n\n<p>Returns:\n    str: A string containing HTML for embedding and interacting with project-specific tables within the web interface.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">project</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.queue_template_var", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.queue_template_var", "kind": "function", "doc": "<p>Queues a template variable for replacement in the HTML content.</p>\n\n<p>Args:\n    var_name (str): The name of the template variable to replace.\n    var_value (str): The value to replace the template variable with.\n    priority (bool, optional): If True, the variable is placed at the front of the queue for early replacement. Defaults to False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">var_name</span>, </span><span class=\"param\"><span class=\"n\">var_value</span>, </span><span class=\"param\"><span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.do_replace_template_vars", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.do_replace_template_vars", "kind": "function", "doc": "<p>Performs template variable replacement within a given HTML template string.</p>\n\n<p>Iterates over queued template variables, replacing placeholders in the template string with their corresponding values.</p>\n\n<p>Args:\n    template_string (str): The HTML template string with placeholders for variable substitution.</p>\n\n<p>Returns:\n    str: The updated HTML template string with all queued template variables replaced by their respective values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">template_string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.do_replace_template_var", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.do_replace_template_var", "kind": "function", "doc": "<p>Replaces a single template variable with its corresponding value in the HTML template string.</p>\n\n<p>Args:\n    template_string (str): The HTML template string containing the placeholder for the variable.\n    var_name (str): The placeholder name of the template variable to be replaced.\n    var_value (str): The value to replace the template variable with.</p>\n\n<p>Returns:\n    str: The HTML template string with the specified template variable replaced by its value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">template_string</span>, </span><span class=\"param\"><span class=\"n\">var_name</span>, </span><span class=\"param\"><span class=\"n\">var_value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.format_option_list", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.format_option_list", "kind": "function", "doc": "<p>Generates HTML <option> elements for each item in a list, marking one as selected if specified.</p>\n\n<p>Useful for dynamically generating dropdown menus in the HTML interface with the current selection marked.</p>\n\n<p>Args:\n    options (list): A list of option values to be included in the dropdown.\n    current_option (str, optional): The value of the option to be marked as selected. Defaults to None.</p>\n\n<p>Returns:\n    str: A string containing <option> tags for each item in the list, with the current_option (if any) marked as selected.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">options</span>, </span><span class=\"param\"><span class=\"n\">current_option</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.load_project_vars", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.load_project_vars", "kind": "function", "doc": "<p>Queues project-specific variables for replacement in the HTML content based on the current project's attributes.</p>\n\n<p>This method is called to update the web interface with details from a specific project, preparing variables for dynamic content generation.</p>\n\n<p>Args:\n    project (Project): The project object whose attributes are to be reflected in the HTML content.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">project</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.parse_multipart", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.parse_multipart", "kind": "function", "doc": "<p>Parses multipart/form-data from a POST request into a more accessible dictionary format.</p>\n\n<p>This method is used when handling file uploads or forms with complex data. It converts the MultipartDecoder object into a \ndictionary where each part's content is easily accessible.</p>\n\n<p>Args:\n    mp (MultipartDecoder): The MultipartDecoder object containing the multipart/form-data from the POST request.</p>\n\n<p>Returns:\n    dict: A dictionary representation of the multipart data, with keys for each form field and values for the field content or file data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.HTTP_UI.parse_key_value_pairs", "modulename": "relocation_impact_analyzer.ui", "qualname": "HTTP_UI.parse_key_value_pairs", "kind": "function", "doc": "<p>Extracts key-value pairs from a string, typically from the headers of a multipart/form-data part.</p>\n\n<p>Args:\n    input_string (str): The string containing key-value pairs, often from part headers in multipart/form-data.</p>\n\n<p>Returns:\n    dict: A dictionary where each key is a header name and the corresponding value is the header value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "relocation_impact_analyzer.ui.run", "modulename": "relocation_impact_analyzer.ui", "qualname": "run", "kind": "function", "doc": "<p>Starts the HTTP server and serves the web interface for the Relocation Impact Analyzer.</p>\n\n<p>This function initializes and starts an HTTP server on a specified address and port, using HTTP_UI as the request handler class.</p>\n\n<p>Args:\n    server_class (HTTPServer, optional): The HTTP server class to use. Defaults to HTTPServer.\n    handler_class (HTTP_UI, optional): The request handler class. Defaults to HTTP_UI.</p>\n\n<p>This server setup is intended for demonstration purposes and lacks security features for production use.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tserver_class=&lt;class &#x27;http.server.HTTPServer&#x27;&gt;,</span><span class=\"param\">\thandler_class=&lt;class &#x27;relocation_impact_analyzer.ui.HTTP_UI&#x27;&gt;</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();